--- In class one we have seen the intro of IAC and terraform.
--- Today we will write codes and see how to write a code in terraform.

--- We will creat a file in the 'terraform-ws' folder only, called 'main.tf' and write some content in the file.
--- Now I want to create a S3 bucket using terraform. So we need to write it in HCL.
--- In terraform we have different yoes of blocks, first block we are going to see is 'resource block'. So you will write resource in thsi block.
--- Now lets go to terraform documentation --- browse terraform aws provider --- then search for S3, find what you want to create. As we want to create  aws S3 bucket select it and you can see the example code.
--- You can use the example and edit it as per your requirements.
--- Now, every aws resource has a lot of configurations when you create it from console and you can select options.However some option are compulsary, but some are optional and if you do not provide any value/select the option it will take as default options.
--- So, here in code as well we will provide the mandatory options and for optional we can add them in code if we require them.

--- Now in resourse block you have 

resource "aws_s3_bucket" "mys3" {
    bucket = "myfirstbucket"
    tags = {
        Name = "demoec2instance"
        Environment = "Dev"
        Owner = "devopsuser"
    }
}

--- So you want to create a resource with a type here "aws_s3 bucket" with name of resource as "mys3".
--- "mys3" is not the name of the bucket, it is logical name of the resource.
--- Then we have have provided required configurations.
--- bucket = "Myfirstbucket" ---> this is the name we would like to give to the bucket.
--- Then we have tags.So we have given tags.

--- Now after you have written the code you have come to the terminal option of VA code and run the command 

--- terrafrom plan --- first we have to do 'terrafrom init', we have already done it so we can directly do terform plan.

--- terrafrom plan is going to plan it, it is going to prepare a blueprint. So, it will not create the resources but will tell what resource are going to be created and etc.
--- So you can look at it and see what it is created and if you are ok with it you can proceed.
--- Once you are ok with the plan, then you can run the command 'terraform apply' and this will create the resources.

--- terraform apply

--- Now you can go and check in your aws console and see that the s3 bucket with name you have given is created.

--- Now lets create a ec2 instance using terraform.
--- Go to the terraform documentation and search for ec2 . Select the aws_instance from the options.
--- Just add this to the existing code in main.tf which we have written for creating s3 bucket.

resource "aws_s3_bucket" "mys3" {
    bucket = "myfirstbucket26856"
    tags = {
        Name = "demoec2instance"
        Environment = "Dev"
        Owner = "devopsuser"
    }
}


resource "aws_instance" "myec2" {
    ami = "ami-0861f4e788f5069dd"
    instance_type = "t2.mirco"
    tags = {
        Name = "demoec2instance"
        Environment = "Dev"
        Owner = "devopsuser"
    }
}

--- we are creating resource type "aws_instance" with the name "myec2".
--- We have given the ami id which we can get from the aws console when crating the ec2 instance.
--- also we have given the instance_type as t2.mirco.

--- Now when you do terraform apply, since we already the s3 bucket resource this will not effect it. Now first lest do terraform plan.

--- terraform plan

--- You can see it says that it is going to create a aws-instance.myec2. You can see configurations. Now do terraform apply.

--- terraform apply

--- You can go and check in aws console you can see the new instance got created.
--- Now the thing is that you have just added a new resource and terraform is updating your environment. It is not doing anything with the s3 bucket, since it knows that it is already exists.
--- You can also modify the code, the resources maybe you can chance the instance type from t2.micro to t2.nano and do terraform plan. But remember if you do that you will be charged by aws since t2.nano is not under free tier.
--- Also, it is not a good practice to modify any resource from aws console if is created using terraform.
--- Also, if you do instance tpe change the instance has to be stopped first, then change the instance type and then restart the instance the same happens with terraform as well. It will stop the instance first and then it will change the instance type.
--- Also you can see the public IP of the instance is changed. Since the instance is stopped and restarted.


--- Now how does terraform knows that wether it has to create something or whether modify something?
--- Here we have first created only 1 resource S3, then we created a resource aws_instance and then we modified the resource.
--- How does the terraform knwo that what are already present and only whats needs to be added or modified?
--- The answer is state file. 
--- You can see a new file got created, which is 'terraform.tfstate'. Which got created as soon as we did terraform apply.
--- So it got created when we did our first terraform apply to create s3 bucket.
--- This 'terraform.tfstate' is managing the state of your resource.
--- If you open 'terraform.tfstate' file. You can see the details of all the resources which your terraform is managing.
--- currently we have 2resources, one is s3 bucket and the other is ec2. So as soon as you do terraform apply,this terraform.tfstate file gets updated and this terraform.tfstate file is managing your resources.
--- If you see in the terraform.tfstate file you can see all the detailed and state of the resources you have created and running. You can see every detail of the resources.
--- So this is how your terrafrom knows that wether it has to create or delete or update something. 

--- Now lets create a new bucket add this in the main.tf code

resource "aws_s3_bucket" "mynews3" {
    bucket = "mynewbucket26856"
    tags = {
        Name = "demoec2instance"
        Environment = "Dev"
        Owner = "devopsuser"
    }
}

--- Now if you do terraform plan and terraform apply.
--- Now as soon as you did terraform plan it says that a the new s3 bucket will be created. So what did terraform do?
--- It checked the code, it compared it with the tfstate file and it found that in tfstate there are only 2 resources myfirstbucket and myec2. So it compared and there is one extra resource, so it requested aws and from aws it brough the details about what is the actual situation on aws.
--- On aws we do not have this new bucket so it decided that this new bucket as to be created.
--- So, whenever you do terraform apply, aws create a resource on cloud and then it comes and updates all about it in tfstate file. So, everytime your tfstate file going to match with the actaul state of resources on AWS.
--- Even when we did modification of instance type it did the 3 way comparision of code, tfstate and aws. Then it updated accordingly.
--- Now tfstate file is very important, if is deleted terraform does not know which resource is running, which is needs to be modifed as it lost all the detailed.
--- If the tfstate is delete if you run the code it will again create all the resources since it doesnot have the infromation that what you have on aws already. SO it wil try to create all the resources again.
--- 
