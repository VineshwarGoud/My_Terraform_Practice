--- Now in cloud/AWS we are seeing a lot of services. Using them you can create different types of resources and all those constitute to your infrastucture.
--- If I want to deploy a application on aws, I need infra for it. Maybe we need EC2, RDS-aurora, s3 bukets, VPC, EFS, loadbalancer, Auto scaling groups, IAM and etc. These all some under infrastucture category.
---  One way of creating these resources is manually using UI.
--- Now you have to deploy this in a dev  env, you have created all of these manually.
--- Now you have depoy this in one more env may be test env, again you will create all the resources manually. 
--- If you do manually the frist thing is that it is very time taking and there are chances of errors as well. Espically if you want to create both the envs. with same configurations which is very difficult to do manually.
--- We might miss some configurations. So it is going to be time taking and error prone.
--- You have create the env and now you have to destroy the env, you have to manually go and delete all the things. Aslo many resources are dependent on each other. Like you cannot delete a VPC with ec2 running on the network. So you have to go and first delete the instance and then delete the VPC. So it is hard to delete them manually.
--- Now, if you forgot to delete a resource and you might be charged and etc.
--- Maybe your client asked you to make some configuration changes, maybe change then instance from T2 medium to T2 large. May be want to add more permissions in the IAM roles or any other modifications. 
--- Now imagine you have to do all those changes manually. Also may be after 1 year you may not remember what chnages you have made, so there is no tracking here.
--- So there are many issues with doing things manually.
--- So what is the solution for this? You have something called Infrastucture as Code(IAC).

IAC:
--- In Infrastucture as code I write a code for creating the infra.
--- So, we will write the code and deploy that code. An env will be created.
--- So if you have created a dev env, you can use same code to create test env or another env and deploy it again. Also you can send the code to your team member or push to a remote repo and you team members can use the same code to create the env.
--- Also there is not chance of error in create new env with same configs.
--- SO, creation is easy, quick and less errors.
--- If you want to destroy the env and resources created you can do it with just single command. So all the resource, created using the code will get deleted.
--- So there is not case of forgeting things and also no issues in deleting the dependencies. So, you have to not worry about which resources has to be deleted first.
--- Updating and making modification is easy. You need to just modify the code for what changes you wanna make and then re-apply the code then the env gets updated.
--- As said you can save this code in you GitHub and you can have version control as well. Also you can who did what changesa and when.
--- So IAC has solved all the problems that we were facing while doing things manually using aws UI.
--- However, you cannot update all the resources in aws, for some you have to create a new updated resource and then delete the old resource. Like if you wanna chnage the instance type from T2 micro to T2 nano you cannot modify it, you have to create a new insatnce with new type.
--- The most popular IAC tool in the market is 'Terrafrom'. Terraform is a cloud agnostic, which means it is independent of any cloud. So, if you can use a tool in AWS, Azure, GCP and any other cloud then is is cloud agnostic.
------------------

Terraform: 

Provider:
--- In terraform the first thing you need to know is provider. Terraform can be used to create infra in different clouds. 
--- How is terraform is able create infra in different clouds? Because of something called as providers.
--- Provider is basicall a set of plugins which help terraform to interact with these clouds. There are different types of providers. There is a provider is AWS, a provideer for GCP a provider for Azure and etc. So if you want to create infra on aws use aws provider.
--- So, how does terraform know whether you have to create resources on aws or gcp or azure or etc? It is using providers.
--- Now if you look at terrafrom documentation. Search in browser for terraform providers.
--- Terraform has a registry where it maintains all a lot. It maintains providers, modules, libraries, tasks and etc.
--- You can see a list of providers like; aws, gcp, azure, kubernetes and etc.

------------------
--- Terraform is written in HCL(Hashicorp configuration language).
--- First always know how to do things manually before learning IAC. 
--- The code which you write in HCL youc can get it from documentation. And you can modify it.
-------------------

Installations:
--- Install Terraform
--- Intsall Visual Studio
--- Create a new workspace/folder on your desktop. We can name it, here I am naming as 'terraform-ws'. Then we will be opening that file in VS code.
--- Install aws cli as we are going to create infra on aws.

--- Configure the CLI.
--- Till now whenever we wanna create resource, we would login to aws account by using user name and password. Then we start to create aws resources.
--- Now we are using cli to create or manage aws resources using commands. So if we are trying anything from the command line, so my command line must also be authenticated. So for the we have to create a IAM user.
--- Create a IAM user on your aws with admin access. Then in aws iam user, in securities create access key.
--- Now we have to configure this iam user in the aws cli.
--- In vs code type command 'aws configure', then enter you access key and secret access key. It also asks for defalut region name enter that and default output formate as json.
--- So your aws cli is configured. To check you can run the command 'aws iam list-users'. This will list the IAM users.
-------------------

--- Now lets start to know to how to write the terraform code.
--- As we dicusses earlier that using terraform we can create infra on different clouds. For that we have providers. Terraform gives you different tyoes of providers.
--- Search 'terraform providers' in browser.
--- We want to create my resources on AWS, so select aws provider.
--- At the top right you can see  'use provider' option, click on it and you will get the code. Copy the code.

terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "6.11.0"
    }
  }
}

provider "aws" {
  # Configuration options
}

--- In VS code create a file in the terrafrom-ws called 'provider.tf' ad paste the provider code here in the file 'terraform.tf'.
--- So, we are telling the terraform that we need which version of aws provider.If you do no specify the version of aws provider it will be latest by default.
--- But mentioning is version is a good practice.

terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "6.11.0"
    }
  }
}

provider "aws" {
  region = "ap-south-1"
}

--- In provider "aws" : you have to specify some extra details, like region in which region you want to create the resources.
--- If you do not provide the region here it will take the default region that we set while configuing the cli.
--- So, in this provider.tf, we are telling terraform that I want to use provider "aws", below its cofigrations we gave region = "ap-south-1" here. And the version of aws provider is version = "6.11.0"
--- So, we are done with writing provider.tf. Now lets understand our first terraform command. You need to run these in the terminal option in you VA code editor.

--- in terminal run 'terraform init' command.
--- terraform init will initialize your terraform. When you do terrafrom init, terraform will look at your provider that you want provider. Here you want aws and vwhich version.
--- Provider is basically a plugin, so all the plugins and libraries related to provider will get downloaded. So, I am initializing terraform and this is just one-time stuff.

--- When you did terraform init you can see a '.terraform' folder got created and '.terraform .lock.hcl' file got created.
--- In '.terraform' folder you have licenses and provider got downloaded.

--------------------- End of class 1 of terraform
